using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace DataSets
{
    public class VulnerabilityRepo : GenericRepository<appspiderEntities, Vulnerability>
    {
        public List<VulnerabilityResource> GetVulns()
        {   var queryString = @"SELECT * 
            FROM[appspider].[dbo].[Vulnerability] v
                join AttackVulnerability av on v.VulnerabilityID = av.VulnerabilityID
            join AttackVulnerabilityTraffic avt on avt.AttackId = av.AttackID

            join VulnerabilityInScanDetails vsd on vsd.VulnerabilityID = v.VulnerabilityID

            join ScanDetails sd on vsd.ScanDetailsID = sd.ScanDetailsID

            where v.VulnType = 'Blind SQL Injection' AND v.Status = 0";


            var connectionString = @"Server=.\sqlexpress;Database=Appspider;Integrated Security=SSPI";
            var returnObj = new List<VulnerabilityResource>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(queryString, connection);
                command.Parameters.AddWithValue("@tPatSName", "Your-Parm-Value");
                connection.Open();
                SqlDataAdapter da = new SqlDataAdapter(command);
                DataTable dt = new DataTable();
                da.Fill(dt);
                
                var vulnId = "";
                bool isFirst = true;
                try
                {
                    var vulnResource = new VulnerabilityResource();
                    foreach (DataRow dr in dt.Rows)
                    {
                        if (vulnId != dr["VulnerabilityID"].ToString())
                        {
                            vulnId = dr["VulnerabilityID"].ToString();
                            if(!isFirst)
                                returnObj.Add(vulnResource);
                            isFirst = false;
                            vulnResource = new VulnerabilityResource()
                            {
                                VulnerabilityID = dr["VulnerabilityID"].ToString(),
                                VulnType = dr["VulnType"].ToString(),
                                VulnUrl = dr["VulnUrl"].ToString(),
                                MatchString = dr["MatchedString"].ToString(),
                                NormalizedPOSTParams = dr["NormalizedPOSTParams"].ToString(),
                                VulnParm = dr["VulnParam"].ToString(),
                                HTMLEntityAttacked = dr["HTMLEntityAttacked"].ToString(),
                                AttackValue = dr["AttackValue"].ToString(),
                                AttackType = dr["AttackType"].ToString(),
                                Method = dr["Method"].ToString(),
                                CWEID = dr["CWEID"].ToString(),
                                CAPEC = dr["CAPEC"].ToString(),
                                DISSA_ASC = dr["DISSA_ASC"].ToString(),
                                OWASP2007 = dr["OWASP2007"].ToString(),
                                OWASP2010 = dr["OWASP2010"].ToString(),
                                OVAL = dr["OVAL"].ToString(),
                                AttackScore = dr["AttackScore"].ToString(),
                                Recommendation = dr["Recommendation"].ToString(),
                                Description = dr["Description"].ToString(),
                                CrawlTrafficTemplate = Encoding.UTF8.GetString(Convert.FromBase64String(dr["CrawlTrafficTemplate"].ToString())),
                                OWASP2013 = dr["OWASP2013"].ToString(),
                                AttackVulnURL = dr["AttackVulnURL"].ToString(),
                                AttackMatchedString = dr["AttackMatchedString"].ToString(),
                                OriginalValue = dr["OriginalValue"].ToString(),
                                Request = Encoding.UTF8.GetString(Convert.FromBase64String(dr["Request"].ToString())),
                                Response = Encoding.UTF8.GetString(Convert.FromBase64String(dr["Response"].ToString()))

                            };
                        }
                        else
                        {
                            vulnResource.Request +=
                                ",[][][]," + Encoding.UTF8.GetString(Convert.FromBase64String(dr["Request"].ToString()));
                            vulnResource.Response +=
                                ",[][][]," + Encoding.UTF8.GetString(Convert.FromBase64String(dr["Request"].ToString()));
                        }

                        
                        Console.WriteLine();
                    }
                    Console.WriteLine();
                }
                finally
                {
                }
            }

            return returnObj;
        }
    }
}
